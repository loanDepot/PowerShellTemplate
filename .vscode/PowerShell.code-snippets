{
  // Place your PowerShellTemplate workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "WriteVerboseVerbose": {
    "scope": "powershell",
    "prefix": ["wvv","Write-Verbose-Verbose"],
    "body": ["Write-Verbose \"${0:message}\" -Verbose"],
    "description": "Write-Verbose -Verbose"
  },
  "CommentBasedHelp": {
    "scope": "powershell",
    "prefix": "help",
    "body": [
      "<#",
      "    .SYNOPSIS",
      "        ${0:short description}",
      "    .DESCRIPTION",
      "        ${1:long description}",
      "    .EXAMPLE",
      "        ${2:example usage}",
      "",
      "        ${3:explanation}",
      "#>"
    ],
    "description": "Minimal comment-based help"
  },
  "MandatoryParameter": {
    "scope": "powershell",
    "prefix": "Mandatory",
    "body": ["[Parameter(Mandatory)]"],
    "description": "[Parameter(Mandatory)]"
  },
  "PSCustomObject": {
    "scope": "powershell",
    "prefix": "PSCustomObject",
    "body": [
      "[PSCustomObject]@{",
      "    PSTypeName = '${1:typename}'",
      "    ${2:property} = \"${3:value}\"",
      "$0}"
    ],
    "description": "Creates a custom PSObject with a fake typename"
  },
  "PowerShell Function": {
    "scope": "powershell",
    "prefix": ["psf", "function"],
    "body": [
      "function ${1:$TM_FILENAME_BASE} {",
      "    <#",
      "        .SYNOPSIS",
      "            ${2:Short Explanation}",
      "",
      "        .DESCRIPTION",
      "            ${3:Longer Explanation, and any details about how it works}",
      "",
      "        .EXAMPLE",
      "            ${1}",
      "",
      "            ${2}",
      "    #>",
      "    [CmdletBinding()]",
      "    param()",
      "    process {",
      "        try {",
      "            $0",
      "        } catch {",
      "            throw \\$_",
      "        }",
      "    }",
      "}"
    ],
    "description": "Define a PowerShell function",
    "isFileTemplate": true
  },
  "Pester Describe": {
    "scope": "powershell",
    "prefix": ["Tests", "Describe"],
    "body": [
      "#requires -Module ${1:$WORKSPACE_NAME}",
      "using namespace System.Diagnostics.CodeAnalysis",
      "# NOTE: If you leave this using, you must ensure you're testing the FIRST version in \\$ENV:PSMODULEPATH",
      "# We normally guarantee that using our Invoke-Build TestModule step",
      "using module ${1}",
      "",
      "[SuppressMessageAttribute(\"PSUseDeclaredVarsMoreThanAssignments\",\"\")]",
      "[SuppressMessageAttribute(\"PSAvoidUsingInvokeExpression\",\"\")]",
      "[SuppressMessageAttribute(\"PSAvoidGlobalVars\",\"\")]",
      "param()",
      "",
      "Describe ${2:${TM_FILENAME_BASE/\\.[Tt]ests?$//}} {",
      "    BeforeAll {",
      "        # We don't want to affect the global PSDefaultParameterValues",
      "        \\$PSDefaultParameterValues = \\$PSDefaultParameterValues + @{",
      "            'Mock:ModuleName'              = '${1}'",
      "            'Assert-MockCalled:ModuleName' = '${1}'",
      "            'Assert-MockCalled:Scope'           = 'Context'",
      "        }",
      "",
      "        # In Pester 5, variables declared in BeforeAll are automatically in scope later",
      "        # In Pester 4, we need them to be global",
      "        # InModuleScope is required for extracting private functions",
      "        # and also ensures we test the right command if it's a duplicate",
      "        \\$global:CommandUnderTest = InModuleScope ${1} { Get-Command '${2}' }",
      "",
      "        # If you're using PowerShell classes, expose them inside Pester",
      "        # NOTE: If you leave this, you must ensure you're testing the FIRST version in \\$ENV:PSMODULEPATH",
      "        & (Get-Module Pester) ([ScriptBlock]::Create('using module ${1}'))",
      "    }",
      "",
      "    Context 'Command Validation' {",
      "        It '${1} should have a command ${2}' {",
      "            \\$CommandUnderTest | Should -Not -BeNullOrEmpty",
      "        }",
      "",
      "        It 'Requires a ${3:Parameter} parameter' {",
      "            \\$CommandUnderTest | Should -HaveParameter \"${3:Parameter}\" -Type [string] -Mandatory",
      "        }",
      "    }",
      "",
      "    Context 'Example 1.' {",
      "        It \"Serves as a placeholder\" {",
      "            \\$result = & \\$CommandUnderTest",
      "            \\$result | Should -Be $0",
      "        }",
      "    }",
      "}"
    ],
    "description": "Describe a function in a module for Pester",
    "isFileTemplate": true
  }
}
