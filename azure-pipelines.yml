# Docs: https://aka.ms/yaml
name: $(Build.DefinitionName) v$(Build.BuildId)
# pool: Linux # TODO: Delete this, or specify your own agent pool

trigger:
- main # TODO: Make sure this matches your default branch name

resources:
  repositories:
  - repository: InvokeBuildTasks
    type: git
    name: InvokeBuildTasks
    ref: main
    clean: true
    fetchDepth: 1

jobs:
  - job: build
    displayName: Build module
    variables:
      - group: PSModuleToProget
    workspace:
      clean: all
    steps:
    - checkout: self
      persistCredentials: true # required for pushing tags
      fetchDepth: 0 # required for gitversion
    - checkout: InvokeBuildTasks

    - pwsh: $(Build.SourcesDirectory)/InvokeBuildTasks/BootStrap.ps1
      workingDirectory: $(Build.SourcesDirectory)/$(Build.Repository.Name)
      displayName: 'Install Dependencies'

    - pwsh: Invoke-Build Build
      displayName: 'Build'
      workingDirectory: $(Build.SourcesDirectory)/$(Build.Repository.Name)

    - pwsh: Invoke-Build Test
      displayName: 'Test'
      workingDirectory: $(Build.SourcesDirectory)/$(Build.Repository.Name)

    - task: PublishTestResults@2
      displayName: Publish Test Results
      inputs:
        testResultsFormat: NUnit
        testResultsFiles: $(Build.BinariesDirectory)/TestResult.xml
        buildPlatform: $(PSPlatform)
        buildConfiguration: Release
        failTaskOnFailedTests: true
        testRunTitle: Pester on $(PSPlatform)
      condition: succeededOrFailed()

    - task: PublishCodeCoverageResults@1
      displayName: Publish Code Coverage
      inputs:
        summaryFileLocation: '$(Build.BinariesDirectory)/coverage.xml'
        pathToSources: $(Build.BinariesDirectory)/PowerShellTemplate
        failIfCoverageEmpty: true
      condition: succeededOrFailed()

    - task: PublishPipelineArtifact@1
      displayName: Publish CodeAnalysisLogs
      inputs:
        targetPath: $(Build.BinariesDirectory)/results.sarif
        ArtifactName: CodeAnalysisLogs
        publishLocation: 'pipeline'
      condition: succeededOrFailed()

    - task: PublishPipelineArtifact@1
      displayName: Publish Artifacts
      inputs:
        targetPath: $(Build.BinariesDirectory)
        ArtifactName: Artifacts
        publishLocation: 'pipeline'

    - pwsh: Invoke-Build TagSource
      displayName: 'TagSource'
      workingDirectory: $(Build.SourcesDirectory)/$(Build.Repository.Name)
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken) # required for pushing tags

    - pwsh: Invoke-Build PublishModule
      displayName: 'PublishModule'
      workingDirectory: $(Build.SourcesDirectory)/$(Build.Repository.Name)
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
      env:
        POWERSHELLMODULEPUBLISHKEY: "$(POWERSHELLMODULEPUBLISHKEY)"
